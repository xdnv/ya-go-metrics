// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetricStorage_GetMetrics_FullMethodName      = "/service.MetricStorage/GetMetrics"
	MetricStorage_PingDB_FullMethodName          = "/service.MetricStorage/PingDB"
	MetricStorage_RequestMetricV1_FullMethodName = "/service.MetricStorage/RequestMetricV1"
	MetricStorage_RequestMetricV2_FullMethodName = "/service.MetricStorage/RequestMetricV2"
	MetricStorage_UpdateMetricV1_FullMethodName  = "/service.MetricStorage/UpdateMetricV1"
	MetricStorage_UpdateMetricV2_FullMethodName  = "/service.MetricStorage/UpdateMetricV2"
	MetricStorage_UpdateMetrics_FullMethodName   = "/service.MetricStorage/UpdateMetrics"
)

// MetricStorageClient is the client API for MetricStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricStorageClient interface {
	GetMetrics(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Metrics, error)
	PingDB(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DataResponse, error)
	RequestMetricV1(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*DataResponse, error)
	RequestMetricV2(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	UpdateMetricV1(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*DataResponse, error)
	UpdateMetricV2(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*RawData, error)
	UpdateMetrics(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*RawData, error)
}

type metricStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricStorageClient(cc grpc.ClientConnInterface) MetricStorageClient {
	return &metricStorageClient{cc}
}

func (c *metricStorageClient) GetMetrics(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Metrics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Metrics)
	err := c.cc.Invoke(ctx, MetricStorage_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricStorageClient) PingDB(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, MetricStorage_PingDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricStorageClient) RequestMetricV1(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, MetricStorage_RequestMetricV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricStorageClient) RequestMetricV2(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, MetricStorage_RequestMetricV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricStorageClient) UpdateMetricV1(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, MetricStorage_UpdateMetricV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricStorageClient) UpdateMetricV2(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*RawData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawData)
	err := c.cc.Invoke(ctx, MetricStorage_UpdateMetricV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricStorageClient) UpdateMetrics(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*RawData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawData)
	err := c.cc.Invoke(ctx, MetricStorage_UpdateMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricStorageServer is the server API for MetricStorage service.
// All implementations must embed UnimplementedMetricStorageServer
// for forward compatibility.
type MetricStorageServer interface {
	GetMetrics(context.Context, *EmptyRequest) (*Metrics, error)
	PingDB(context.Context, *EmptyRequest) (*DataResponse, error)
	RequestMetricV1(context.Context, *Metric) (*DataResponse, error)
	RequestMetricV2(context.Context, *DataRequest) (*DataResponse, error)
	UpdateMetricV1(context.Context, *Metric) (*DataResponse, error)
	UpdateMetricV2(context.Context, *RawData) (*RawData, error)
	UpdateMetrics(context.Context, *RawData) (*RawData, error)
	mustEmbedUnimplementedMetricStorageServer()
}

// UnimplementedMetricStorageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricStorageServer struct{}

func (UnimplementedMetricStorageServer) GetMetrics(context.Context, *EmptyRequest) (*Metrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedMetricStorageServer) PingDB(context.Context, *EmptyRequest) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingDB not implemented")
}
func (UnimplementedMetricStorageServer) RequestMetricV1(context.Context, *Metric) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMetricV1 not implemented")
}
func (UnimplementedMetricStorageServer) RequestMetricV2(context.Context, *DataRequest) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMetricV2 not implemented")
}
func (UnimplementedMetricStorageServer) UpdateMetricV1(context.Context, *Metric) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricV1 not implemented")
}
func (UnimplementedMetricStorageServer) UpdateMetricV2(context.Context, *RawData) (*RawData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricV2 not implemented")
}
func (UnimplementedMetricStorageServer) UpdateMetrics(context.Context, *RawData) (*RawData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetrics not implemented")
}
func (UnimplementedMetricStorageServer) mustEmbedUnimplementedMetricStorageServer() {}
func (UnimplementedMetricStorageServer) testEmbeddedByValue()                       {}

// UnsafeMetricStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricStorageServer will
// result in compilation errors.
type UnsafeMetricStorageServer interface {
	mustEmbedUnimplementedMetricStorageServer()
}

func RegisterMetricStorageServer(s grpc.ServiceRegistrar, srv MetricStorageServer) {
	// If the following call pancis, it indicates UnimplementedMetricStorageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetricStorage_ServiceDesc, srv)
}

func _MetricStorage_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricStorageServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricStorage_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricStorageServer).GetMetrics(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricStorage_PingDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricStorageServer).PingDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricStorage_PingDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricStorageServer).PingDB(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricStorage_RequestMetricV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricStorageServer).RequestMetricV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricStorage_RequestMetricV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricStorageServer).RequestMetricV1(ctx, req.(*Metric))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricStorage_RequestMetricV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricStorageServer).RequestMetricV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricStorage_RequestMetricV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricStorageServer).RequestMetricV2(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricStorage_UpdateMetricV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricStorageServer).UpdateMetricV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricStorage_UpdateMetricV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricStorageServer).UpdateMetricV1(ctx, req.(*Metric))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricStorage_UpdateMetricV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricStorageServer).UpdateMetricV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricStorage_UpdateMetricV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricStorageServer).UpdateMetricV2(ctx, req.(*RawData))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricStorage_UpdateMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricStorageServer).UpdateMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricStorage_UpdateMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricStorageServer).UpdateMetrics(ctx, req.(*RawData))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricStorage_ServiceDesc is the grpc.ServiceDesc for MetricStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.MetricStorage",
	HandlerType: (*MetricStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetrics",
			Handler:    _MetricStorage_GetMetrics_Handler,
		},
		{
			MethodName: "PingDB",
			Handler:    _MetricStorage_PingDB_Handler,
		},
		{
			MethodName: "RequestMetricV1",
			Handler:    _MetricStorage_RequestMetricV1_Handler,
		},
		{
			MethodName: "RequestMetricV2",
			Handler:    _MetricStorage_RequestMetricV2_Handler,
		},
		{
			MethodName: "UpdateMetricV1",
			Handler:    _MetricStorage_UpdateMetricV1_Handler,
		},
		{
			MethodName: "UpdateMetricV2",
			Handler:    _MetricStorage_UpdateMetricV2_Handler,
		},
		{
			MethodName: "UpdateMetrics",
			Handler:    _MetricStorage_UpdateMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
