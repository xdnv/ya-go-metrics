// custom error checker
// forbids direct os.Exit() call in main() function of "main" package
package main

import (
	"go/ast"

	"golang.org/x/tools/go/analysis"
)

var OsExitCheckAnalyzer = &analysis.Analyzer{
	Name: "osexitcheck",
	Doc:  "forbids direct os.Exit() call in main() function of \"main\" package",
	Run:  runCheckOsExit,
}

func runCheckOsExit(pass *analysis.Pass) (interface{}, error) {
	for _, f := range pass.Files {

		// skip check if it's not main package
		if f.Name.Name != "main" {
			continue
		}

		// skip autogenerated files bound to main package (test_main etc.)
		if ast.IsGenerated(f) {
			continue
		}

		// ast.Inspect comes thru all AST nodes
		ast.Inspect(f, func(n ast.Node) bool {
			//check for main() function
			if fn, ok := n.(*ast.FuncDecl); ok && fn.Name.Name == "main" {
				// Process main() body
				for _, stmt := range fn.Body.List {
					//iterating through statements
					//check if it's standalone statement
					if callExpr, ok := stmt.(*ast.ExprStmt); ok {
						//check if it's expression with arguments
						if selExpr, ok := callExpr.X.(*ast.CallExpr); ok {
							//check if it's expression with selector
							if ident, ok := selExpr.Fun.(*ast.SelectorExpr); ok {
								if id, ok := ident.X.(*ast.Ident); ok && id.Name == "os" && ident.Sel.Name == "Exit" {
									pass.Reportf(id.NamePos, "os.Exit should not be used in main()")
								}
							}
						}
					}
				}
			}
			return true
		})
	}
	return nil, nil
}
